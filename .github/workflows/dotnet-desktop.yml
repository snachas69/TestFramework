# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  pull_request:
    branches:
      - master
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight UTC
  workflow_dispatch:
    inputs:
      browser:
        description: 'Select browser for UI tests'
        required: true
        default: 'chrome'
        type: choice
        options:
          - chrome
          - firefox
          - edge

jobs:
  api_tests:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore

      - name: Run API tests
        run: dotnet test --no-build --filter "Category=API" --logger "trx;LogFileName=api_tests.trx"

      - name: Upload API test results
        uses: actions/upload-artifact@v4
        with:
          name: api-test-results
          path: '**/TestResults/api_tests.trx'
        continue-on-error: true
        
  ui_tests:
    runs-on: windows-latest
    needs: api_tests
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore

      - name: Install selected browser
        shell: pwsh
        run: |
          $browser = "${{ github.event.inputs.browser }}"
          "Selected browser: $browser"
      
          Set-ExecutionPolicy Bypass -Scope Process -Force
      
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }
      
          if ($browser -eq "firefox") {
            choco install -y firefox
          } elseif ($browser -eq "edge") {
            choco install -y microsoft-edge
          } else {
            choco install -y googlechrome --ignore-checksums
          }

      - name: Update appsettings.json with selected browser
        shell: pwsh
        run: |
          $browser = "${{ github.event.inputs.browser }}"
          $path = "YourTestProject/appsettings.json"  # Replace with actual path
          (Get-Content $path -Raw) -replace '"Browser"\s*:\s*".*?"', '"Browser": "' + $browser + '"' | Set-Content $path

      - name: Run UI tests
        run: dotnet test --no-build --filter "Category=UI" --logger "trx;LogFileName=ui_tests.trx"

      - name: Upload UI test results
        uses: actions/upload-artifact@v4
        with:
          name: ui-test-results
          path: '**/TestResults/ui_tests.trx'
